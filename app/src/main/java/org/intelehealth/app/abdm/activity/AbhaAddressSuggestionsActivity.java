package org.intelehealth.app.abdm.activity;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.Build;
import android.os.Bundle;
import android.os.LocaleList;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.view.ViewCompat;

import com.github.ajalt.timberkt.Timber;
import com.google.android.material.chip.Chip;

import org.checkerframework.checker.units.qual.A;
import org.intelehealth.app.R;
import org.intelehealth.app.abdm.dialog.AbhaAddressSuggestionDialogFragment;
import org.intelehealth.app.abdm.model.EnrollSuggestionRequestBody;
import org.intelehealth.app.abdm.model.OTPVerificationResponse;
import org.intelehealth.app.abdm.model.SetAbhaAddressResponse;
import org.intelehealth.app.activities.identificationActivity.IdentificationActivity_New;
import org.intelehealth.app.app.AppConstants;
import org.intelehealth.app.databinding.ActivityAbhaAddressSuggestionsBinding;
import org.intelehealth.app.utilities.SessionManager;
import org.intelehealth.app.utilities.SnackbarUtils;
import org.intelehealth.app.utilities.StringUtils;
import org.intelehealth.app.utilities.UrlModifiers;
import org.intelehealth.app.utilities.WindowsUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import io.reactivex.Single;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.observers.DisposableSingleObserver;
import io.reactivex.schedulers.Schedulers;
import retrofit2.Response;

public class AbhaAddressSuggestionsActivity extends AppCompatActivity {
    private final Context context = AbhaAddressSuggestionsActivity.this;
    public static final String TAG = AbhaAddressSuggestionsActivity.class.getSimpleName();
    ActivityAbhaAddressSuggestionsBinding binding;
    private String accessToken;

    private OTPVerificationResponse otpVerificationResponse;
    SnackbarUtils snackbarUtils;
    SessionManager sessionManager = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityAbhaAddressSuggestionsBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        WindowsUtils.setStatusBarColor(AbhaAddressSuggestionsActivity.this);  // changing status bar color
        snackbarUtils = new SnackbarUtils();
        sessionManager = new SessionManager(context);

        Intent intent = getIntent();
        accessToken = intent.getStringExtra("accessToken");
        otpVerificationResponse = (OTPVerificationResponse) intent.getSerializableExtra("payload");

        if (intent.hasExtra("addressList")) {
            ArrayList<String> phrAddressSuggestionsList = intent.getStringArrayListExtra("addressList");
            if (phrAddressSuggestionsList != null) {
                for (String phrAddressAutoGenerated : phrAddressSuggestionsList) {
                    createDynamicChips(phrAddressAutoGenerated);
                }
            }
        }

        binding.submitABHAAddressBtn.setOnClickListener(v -> {
            Chip chip = binding.chipGrp.findViewById(binding.chipGrp.getCheckedChipId());
            String selectedChip = chip != null ? chip.getText().toString() : "";
            String abhaAddress = Objects.requireNonNull(binding.etAbhaAddress.getText()).toString();

            if (TextUtils.isEmpty(selectedChip) && TextUtils.isEmpty(abhaAddress)) {
                Toast.makeText(context, getString(R.string.please_select_abha_address), Toast.LENGTH_SHORT).show();
            } else if (!TextUtils.isEmpty(selectedChip)) {
                callSetPreferredABHAAddressAPI(selectedChip);
            } else if (isValidAbhaAddress(abhaAddress)) {
                callSetPreferredABHAAddressAPI(abhaAddress);
            }

        });
        binding.ivAbhaSuggestion.setOnClickListener(v -> {
            AbhaAddressSuggestionDialogFragment  abhaAddressSuggestionDialogFragment = new AbhaAddressSuggestionDialogFragment();
            abhaAddressSuggestionDialogFragment.show(getSupportFragmentManager(),"");
        });

     }

    private boolean isValidAbhaAddress(String text) {
        if (text.length() < 8) {
            Toast.makeText(context, context.getString(R.string.abha_address_must_be_at_least_8_characters_long), Toast.LENGTH_SHORT).show();
            return false;
        } else if (!isValidAbhaRegex(text)) {
            Toast.makeText(context, context.getText(R.string.please_enter_valid_abha_address), Toast.LENGTH_SHORT).show();
            return false;
        } else {
            return true;
        }
    }

    public boolean isValidAbhaRegex(String input) {
        String regex = "^(?!.*[._]{2})(?![._])[a-zA-Z0-9]+([._]?[a-zA-Z0-9]+)*$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(input);
        return matcher.matches();
    }

    private void callSetPreferredABHAAddressAPI(String selectedChip) {
        if (!selectedChip.isEmpty()) {   // here you set this value to the Setter of the response variable and pass it to identification screen.
            if (selectedChip.equalsIgnoreCase(otpVerificationResponse.getABHAProfile().getPhrAddress().get(0))) {
                Intent dataIntent = new Intent(context, IdentificationActivity_New.class);
                dataIntent.putExtra("payload", otpVerificationResponse);    // not using this setPreferred response and using the previous aadhar api response itself...
                dataIntent.putExtra("accessToken", accessToken);
                startActivity(dataIntent);
                finish();
                return; // ie. selected is same as auto-generated than move ahead dont call setPrf api.
            } else {
                List<String> phrAddrList = new ArrayList<>();
                phrAddrList.add(selectedChip);
                otpVerificationResponse.getABHAProfile().setPhrAddress(phrAddrList);
            }
        }

        // api - start
        String url = UrlModifiers.getSetPreferredABHAAddressUrl();
        EnrollSuggestionRequestBody body = new EnrollSuggestionRequestBody();
        body.setTxnId(otpVerificationResponse.getTxnId());
        body.setAbhaAddress(otpVerificationResponse.getABHAProfile().getPhrAddress().get(0));

        Single<Response<SetAbhaAddressResponse>> setPhrAddressResponse =
                AppConstants.apiInterface.PUSH_SET_PREFERRED_ABHA_ADDRESS(url, accessToken, body);


        new Thread(() -> setPhrAddressResponse
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new DisposableSingleObserver<>() {
                    @Override
                    public void onSuccess(Response<SetAbhaAddressResponse> setAbhaAddressResponseResponse) {
                        handleSuccess(setAbhaAddressResponseResponse);
                    }

                    @Override
                    public void onError(Throwable e) {
                        Timber.tag(TAG).e("onError: onSuccess: callSetPreferredABHAAddressAPI%s", e.getMessage());
                    }
                })).start();
    }

    private void handleSuccess(Response<SetAbhaAddressResponse> setAbhaAddressResponseResponse) {
        if (setAbhaAddressResponseResponse.code() == 200) {// ie. setting this new abha address is done.
            try {
                Toast.makeText(context, getString(R.string.preferred_abha_address_is_set_successfully), Toast.LENGTH_SHORT).show();
                Timber.tag(TAG).d("onSuccess: callSetPreferredABHAAddressAPI: " +
                        otpVerificationResponse.toString() + " \nabha profile: " + otpVerificationResponse.getABHAProfile().toString());
                Intent dataIntent = new Intent(context, IdentificationActivity_New.class);
                dataIntent.putExtra("payload", otpVerificationResponse);    // not using this setPreferred response and using the previous aadhar api response itself...
                dataIntent.putExtra("accessToken", accessToken);
                startActivity(dataIntent);
                finish();

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (setAbhaAddressResponseResponse.code() == 409) {
            Toast.makeText(context, "This ABHA address already exists, please use a different one", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(context, "This ABHA address already exists, please use a different one", Toast.LENGTH_SHORT).show();
        }
    }


    private void createDynamicChips(String chipTitle) {
        Chip chip = new Chip(context);
        chip.setId(ViewCompat.generateViewId());
        chip.setText(chipTitle);
        chip.setCheckable(true);
        chip.setChipBackgroundColorResource(R.color.white);
        chip.setChipStrokeColorResource(R.color.colorPrimaryDark);
        chip.setChipStrokeWidth(2);
        chip.setTextColor(getColor(R.color.colorPrimary));
        chip.isCloseIconVisible();
        chip.setCheckedIconTintResource(R.color.colorPrimary);
        binding.chipGrp.addView(chip);
    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onBackPressed() {
        //  super.onBackPressed();
        snackbarUtils.showSnackConstraintLayoutParentSuccess(context, binding.layoutParent,
                StringUtils.getMessageTranslated(getString(R.string.please_click_on_submit_button_to_proceed), sessionManager.getAppLanguage()),
                true);
    }

    @Override
    protected void attachBaseContext(Context newBase) {
        super.attachBaseContext(setLocale(newBase));
    }

    public Context setLocale(Context context) {
        SessionManager sessionManager1 = new SessionManager(context);
        String appLanguage = sessionManager1.getAppLanguage();
        Resources res = context.getResources();
        Configuration conf = res.getConfiguration();
        Locale locale = new Locale(appLanguage);
        Locale.setDefault(locale);
        conf.setLocale(locale);
        context.createConfigurationContext(conf);
        DisplayMetrics dm = res.getDisplayMetrics();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            conf.setLocales(new LocaleList(locale));
        } else {
            conf.locale = locale;
        }
        res.updateConfiguration(conf, dm);
        return context;
    }
}